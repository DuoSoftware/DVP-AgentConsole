/** * Created by Damith on 1/9/2017. */agentApp.controller('agentSettingCtrl', function ($scope, $http, FileUploader, fileService,                                                  jwtHelper, userProfileApiAccess, authService, agentSettingFact,                                                  loginService, ticketService) {    //basica data    $scope.tenant = 0;    $scope.company = 0;    $scope.isLoadingRequ = false;    var loginName = authService.GetResourceIss();    $scope.getCompanyTenant = function () {        var decodeData = jwtHelper.decodeToken(authService.TokenWithoutBearer());        console.info(decodeData);        $scope.company = decodeData.company;        $scope.tenant = decodeData.tenant;    };    $scope.getCompanyTenant();    $scope.closeSettingPage = function () {        agentSettingFact.changeSettingPageStatus(false);    };    /* 01. view point functions (set dynamically height)     02.get current profile data     02. get settings page menu function     03. personal information     04. image crop and upload     05. ticket config     * */    //    //01. view point functions (set dynamically height)    document.getElementById('settingWrapper').style.height = jsUpdateSize();    var onLoadSetHeight = function () {        $scope.windowHeight = jsUpdateSize() + "px";        document.getElementById('settingWrapper').style.height = $scope.windowHeight;    };    window.onload = onLoadSetHeight();    window.onresize = function () {        $scope.windowHeight = jsUpdateSize() + "px";        document.getElementById('settingWrapper').style.height = $scope.windowHeight;    };    //02.get current profile data    $scope.CurrentProfile = {};    var loadCurrentProfile = function (username) {        userProfileApiAccess.getMyProfile().then(function (data) {            if (data.IsSuccess) {                $scope.CurrentProfile = data.Result;                if (data.Result) {                    if (data.Result.address) {                        $scope.displayAddress = data.Result.address.city + ' , ' + data.Result.address.province + ' , ' + data.Result.address.country;                    }                    if (data.Result.veeryaccount && data.Result.veeryaccount.contact) {                        $scope.displayVeeryContact = data.Result.veeryaccount.display + ' | ' + data.Result.veeryaccount.contact;                    }                    else {                        $scope.displayVeeryContact = 'Veery contact not configured yet';                    }                    if (data.Result.email) {                        $scope.displayEmail = data.Result.email.contact;                        $scope.displayEmailVerify = data.Result.email.verified;                    }                    // if (data.Result.phoneNumber) {                    //     $scope.displayPhoneNumber = data.Result.phoneNumber.contact;                    // }                    // if (data.Result.firstname) {                    //     $scope.displayName = data.Result.firstname;                    // }                    // if (data.Result.lastname) {                    //     $scope.displayName = $scope.displayName + ' ' + data.Result.lastname;                    // }                    if (data.Result.birthday) {                        var momentUtc = moment(data.Result.birthday).utc();                        data.Result.dob = {};                        data.Result.dob.day = momentUtc.date().toString();                        data.Result.dob.month = (momentUtc.month() + 1).toString();                        data.Result.dob.year = momentUtc.year();                    }                    else {                        data.Result.dob = {};                        data.Result.dob.day = moment().date().toString();                        data.Result.dob.month = (moment().month() + 1).toString();                        data.Result.dob.year = moment().year();                    }                }            }            else {                console.log(data);            }        }, function (err) {            console.log(err);        });    };    $scope.inti = function () {        if (loginName) {            loadCurrentProfile(loginName);        }    };    //update profile image    var updateProfile = function () {        $scope.isLoadingRequ = true;        $('#proPersInfo').removeClass('display-none');        userProfileApiAccess.updateMyProfile($scope.CurrentProfile).then(function (data) {            $('#proPersInfo').addClass('display-none');            if (data.IsSuccess) {                $scope.showAlert('Success', 'success', 'User profile updated successfully');            }            else {                $scope.showAlert('Error', 'error', errMsg);            }            $scope.isLoadingRequ = false;        }, function (err) {            $scope.isLoadingRequ = false;            $('#proPersInfo').addClass('display-none');            loginService.isCheckResponse(err);            var errMsg = "Error occurred while saving profile";            if (err.statusText) {                errMsg = err.statusText;            }            $scope.showAlert('Error', 'error', errMsg);        });    };    /*settings page menu */    $scope.menusObj = {        menu: [],        selectedMenu: []    };    //Get setting menu    //Get all country list    var getSettingPageMenu = function () {        getJSONData($http, "settingMenu", function (res) {            $scope.menusObj.menu = res;            if (res && res.length != 0) {                $scope.menusObj.selectedMenu = res[0];                $scope.menusObj.selectedMenu.selected = true;            }        });    };    var getAllCountry = function () {        getJSONData($http, "countryList", function (res) {            $scope.countryList = res;        });    };    //Get all languages    var getAllLanguages = function () {        getJSONData($http, "languages", function (res) {            $scope.languages = res;        });    };    var onLoad = function () {        getSettingPageMenu();        getAllLanguages();        getAllCountry();    };    onLoad();    var getTicketConfig = function () {        ticketService.GetMyTicketConfig(function (status, res) {            if (status) {                $scope.ticket = res.Result;            } else {                $scope.showAlert('Error', 'error', 'Get Ticker Config Data Error.');            }        });    };    $scope.clickMenu = function (menu) {        if (menu) {            if ($scope.menusObj.selectedMenu.length != 0) {                $scope.menusObj.selectedMenu.selected = false;                $scope.menusObj.selectedMenu = [];                $scope.menusObj.selectedMenu = menu;                $scope.menusObj.selectedMenu.selected = true;                if ($scope.menusObj.selectedMenu.id == 'sm04') {                    getTicketConfig();                }            }        } else {            //upload image wrapper dispaly            $scope.menusObj.selectedMenu.selected = false;            $scope.menusObj.selectedMenu = [];            $scope.menusObj.selectedMenu = $scope.menusObj.menu[4];        }    };    //personal information    $scope.gender = ['Male', 'Female'];    var genDayList = function () {        var max = 31;        var dayArr = [];        for (min = 1; min <= max; min++) {            dayArr.push(min);        }        return dayArr;    };    $scope.dayList = genDayList();    $scope.monthList = [        {index: 1, name: "January"},        {index: 2, name: "February"},        {index: 3, name: "March"},        {index: 4, name: "April"},        {index: 5, name: "May"},        {index: 6, name: "June"},        {index: 7, name: "July"},        {index: 8, name: "August"},        {index: 9, name: "September"},        {index: 10, name: "October"},        {index: 11, name: "November"},        {index: 12, name: "December"}    ];    $scope.yearList = [];    var getYears = function () {        var currentYear = new Date().getFullYear();        for (var i = 0; i < 100 + 1; i++) {            $scope.yearList.push(currentYear - i);        }    };    getYears();    /*image crop and upload */    $scope.isUploadImg = false;    $scope.myCroppedImage = '';    //    $scope.file = {};    $scope.file.Category = "PROFILE_PICTURES";    var uploader = $scope.uploader = new FileUploader({        url: fileService.UploadUrl,        headers: fileService.Headers    });    var clearQueue = function () {        uploader.clearQueue();        $scope.isUploadDisable = true;    };    //filter upload image    uploader.filters.push({        name: 'imageFilter',        fn: function (item /*{File|FileLikeObject}*/, options) {            var type = '|' + item.type.slice(item.type.lastIndexOf('/') + 1) + '|';            return '|jpg|png|jpeg|bmp|gif|'.indexOf(type) !== -1;        }    });    // uploader callback function    uploader.onWhenAddingFileFailed = function (item /*{File|FileLikeObject}*/, filter, options) {        console.info('onWhenAddingFileFailed', item, filter, options);    };    uploader.onAfterAddingFile = function (item) {        console.info('onAfterAddingFile', item);        if (item.file.type.split("/")[0] == "image") {            //fileItem.upload();            item.croppedImage = '';            var reader = new FileReader();            reader.onload = function (event) {                $scope.$apply(function () {                    $scope.isUploadImg = true;                    item.image = event.target.result;                });            };            reader.readAsDataURL(item._file);            $scope.isUploadDisable = false;        }        else {            new PNotify({                title: 'Profile picture upload',                text: 'Invalid File type. Retry',                type: 'error',                styling: 'bootstrap3'            });        }    };    uploader.onAfterAddingAll = function (addedFileItems) {        if (!$scope.file.Category) {            uploader.clearQueue();            new PNotify({                title: 'File Upload!',                text: 'Invalid File Category.',                type: 'error',                styling: 'bootstrap3'            });            return;        }        console.info('onAfterAddingAll', addedFileItems);    };    uploader.onBeforeUploadItem = function (item) {        console.info('onBeforeUploadItem', item);        var blob = dataURItoBlob(item.croppedImage);        item._file = blob;        item.formData.push({'fileCategory': 'PROFILE_PICTURES'});    };    var dataURItoBlob = function (dataURI) {        var binary = atob(dataURI.split(',')[1]);        var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];        var array = [];        for (var i = 0; i < binary.length; i++) {            array.push(binary.charCodeAt(i));        }        return new Blob([new Uint8Array(array)], {type: mimeString});    };    uploader.onProgressItem = function (fileItem, progress) {        console.info('onProgressItem', fileItem, progress);    };    uploader.onProgressAll = function (progress) {        console.info('onProgressAll', progress);    };    uploader.onSuccessItem = function (fileItem, response, status, headers) {        console.info('onSuccessItem', fileItem, response, status, headers);    };    uploader.onErrorItem = function (fileItem, response, status, headers) {        console.info('onErrorItem', fileItem, response, status, headers);    };    uploader.onCancelItem = function (fileItem, response, status, headers) {        console.info('onCancelItem', fileItem, response, status, headers);    };    uploader.onCompleteItem = function (fileItem, response, status, headers) {        console.info('onCompleteItem', fileItem, response, status, headers);        console.log("result ", response.Result);        new PNotify({            title: 'File Upload!',            text: "Picture uploaded successfully",            type: 'success',            styling: 'bootstrap3'        });        if (response.Result) {            $scope.CurrentProfile.avatar = baseUrls.fileService + "InternalFileService/File/Download/" + $scope.tenant + "/" + $scope.company + "/" + response.Result + "/ProPic";            updateProfile();        }    };    uploader.onCompleteAll = function () {        console.info('onCompleteAll');    };    $scope.cancelUpload = function () {        $scope.isUploadImg = false;        $scope.uploader.queue[0].image = "";        clearQueue();    };    //change agent password    $scope.oldPassword = null;    $scope.newPassword = null;    $scope.updateMyPassword = function (oldPwd, newPwd) {        //verify password        var param = {            oldpassword: '',            newpassword: ''        };        param.oldpassword = oldPwd;        param.newpassword = newPwd;        $scope.isLoadingRequ = true;        $('#proPersInfo').removeClass('display-none');        loginService.UpdateMyPwd(param, function (status, res) {            $scope.isLoadingRequ = true;            $('#proPersInfo').addClass('display-none');            if (res) {                $scope.showAlert('Success', 'success', res);            } else {                $scope.showAlert('Error', 'error', 'Invalid authentication..');            }        });    };    $scope.updateMyPersonalData = function () {        updateProfile();    };    //ticket config    $scope.ticket = {};    $scope.ticket = {        subject: '',        priority: 'normal',        description: ''    };    $scope.setPriority = function (priority) {        $scope.ticket.priority = priority;    };    $scope.updateTicketConfig = function () {        $scope.isLoadingRequ = true;        $('#proPersInfo').removeClass('display-none');        ticketService.SaveMyTicketConfig($scope.ticket, function (status, res) {            $('#proPersInfo').addClass('display-none');            $scope.isLoadingRequ = false;            if (status) {                $scope.showAlert('Success', 'success', 'Ticket Config Saved Successfully');            } else {                $scope.showAlert('Error', 'error', 'Ticker Config Save Error');            }        });    };    console.log('load agent setting ctrl...');});//Password verificationagentApp.directive('passwordVerify', function () {    return {        restrict: 'A', // only activate on element attribute        require: 'ngModel', // get a hold of NgModelController        link: function (scope, elem, attrs, ngModel) {            if (!ngModel) return; // do nothing if no ng-model            // watch own value and re-validate on change            scope.$watch(attrs.ngModel, function () {                validate();            });            // observe the other value and re-validate on change            attrs.$observe('passwordVerify', function (val) {                validate();            });            var validate = function () {                // values                var val1 = ngModel.$viewValue;                var val2 = attrs.passwordVerify;                // set validity                var status = !val1 || !val2 || val1 === val2;                ngModel.$setValidity('passwordVerify', status);                // return val1            };        }    }});